/**
 * \file Game.h
 * Этот файл содержит класс Game, где объявлены все действия связанные с игрой
 */
#ifndef GAME_H
#define GAME_H

#include "setka.h"
#include "Mnogoblok.cpp"

/**
 * \class Game
 * Класс, представляющий игру.
 *
 * Этот класс используется для управления игровым процессом, включая генерацию блоков, обработку ввода,
 * обновление счета и проверку состояния игры.
 */

class Game
{
public:
    /**
     * Конструктор по умолчанию для класса Game.
     *
     * Инициализирует новый объект игры с начальными параметрами.
     */
    Game();

    /**
     * Возвращает случайный блок.
     *
     * \return Случайный блок типа gBlock.
     */
    gBlock RandomniBlock();

    /**
     * Возвращает все блоки в игре.
     *
     * \return Вектор всех блоков в игре.
     */
    std::vector<gBlock> PoluchetAllBloki();

    /**
     * Рисует текущую игру на экране.
     */
    void Risov();

    /**
     * Обрабатывает ввод с клавиатуры для управления игрой.
     */
    void Klava();

    /**
     * Перемещает текущий блок влево.
     */
    void MoveVlevo();

    /**
     * Перемещает текущий блок вправо.
     */
    void MoveVpravo();

    /**
     * Перемещает текущий блок вниз.
     */
    void MoveVniz();

    /// Атрибуты
    Setka setka;   ///< Объект типа Setka, представляющий игровую сетку.
    bool gameover; ///< Флаг, указывающий на завершение игры. Если true, игра окончена.
    int score;     ///< Текущий счет игрока.

private:
    /**
     * Проверяет, вышел ли текущий блок за пределы игровой области.
     *
     * \return true, если блок вышел за пределы, иначе false.
     */
    bool ProverkaBlokaNaVilet();

    std::vector<gBlock> bloki; ///< Вектор всех блоков в игре.
    gBlock etotBlok;           ///< Текущий блок, который управляется игроком.
    gBlock sledBlok;           ///< Следующий блок, который появится после текущего.

    /**
     * Сбрасывает игру до начального состояния.
     */
    void Reset();

    /**
     * Обновляет счет на основе количества очищенных линий и очков за перемещение блока вниз.
     *
     * \param[in] LinesCleared Количество очищенных линий.
     * \param[in] moveDownOchki Очки за перемещение блока вниз.
     */
    void ObnovitScore(int LinesCleared, int moveDownOchki);

    /**
     * Поворачивает текущий блок.
     */
    void PerevernBlock();

    /**
     * Останавливает текущий блок и фиксирует его положение на сетке.
     */
    void Ostanovit();

    /**
     * Проверяет, может ли текущий блок поместиться в игровую область без пересечений с другими блоками.
     *
     * \return true, если блок помещается, иначе false.
     */
    bool BlockVlez();
};
#endif