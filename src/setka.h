/**
 * \file setka.h
 * Этот файл содержит класс Setka, где объявлены все действия связанные с сеткой тетриса(проверка на вылет из сетки, рисование самой сетки и т.д.)
 */
#ifndef SETKA_H
#define SETKA_H

#include <vector>
#include <raylib.h>

/**
 * \class Setka
 * Класс, представляющий двумерную сетку.
 *
 * Этот класс используется для управления состоянием сетки, включая её инициализацию, визуализацию, проверку состояния ячеек и очистку заполненных строк.
 */
class Setka
{
public:
    /**
     * Конструктор по умолчанию для класса Setka.
     *
     * Инициализирует новый объект сетки с заданными размерами и начальными значениями.
     */
    Setka();

    /**
     * Рисует сетку на экране.
     *
     * Этот метод отвечает за визуализацию сетки на экране.
     */
    void Risov();

    /**
     * Инициализирует сетку начальными значениями.
     *
     * Подготавливает сетку к использованию, устанавливая начальные значения для всех ячеек.
     */
    void Initialaze();

    /**
     * Печатает текущее состояние сетки.
     *
     * Выводит текущее состояние сетки в консоль или другой вывод.
     */
    void print();

    /**
     * Проверяет, находятся ли заданные координаты внутри границ сетки.
     *
     * \param[in] row Значение строки.
     * \param[in] col Значение столбца.
     * \return true, если координаты находятся внутри границ сетки; false в противном случае.
     */
    bool ProverkaNaVilet(int row, int col);

    /**
     * Выполняет финальную очистку заполненных строк в сетке.
     *
     * Очищает заполненные строки в сетке и возвращает количество очищенных строк.
     *
     * \return Количество очищенных строк.
     */
    int FinalOchistka();

    /**
     * Проверяет, является ли заданная ячейка пустой.
     *
     * \param[in] row Значение строки.
     * \param[in] col Значение столбца.
     * \return true, если ячейка пустая; false в противном случае.
     */
    bool ProverkaNaPystoty(int row, int col);

    /**
     * Проверяет, является ли заданная строка полностью заполненной.
     *
     * \param[in] row Значение строки.
     * \return true, если строка полностью заполнена; false в противном случае.
     */
    bool ProverkaNaPolnoty(int row);

    int setka[20][10]; ///< Двумерный массив для хранения состояния сетки.

private:
    int numRows;               ///< Количество строк в сетке.
    int numCols;               ///< Количество столбцов в сетке.
    int size_of_cell;          ///< Размер ячейки в сетке (в пикселях или других единицах измерения).
    std::vector<Color> colors; ///< Вектор цветов для ячеек сетки.

    

    /**
     * Очищает заданную строку в сетке.
     *
     * \param[in] row Значение строки, которую необходимо очистить.
     */
    void Ochistka(int row);

    /**
     * Опускает все строки выше заданной строки на указанное количество позиций.
     *
     * \param[in] row Строка, с которой начинается опускание.
     * \param[in] NumPows Количество позиций для опускания строк.
     */
    void OpystitVse(int row, int NumPows);
};
#endif